/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// layers
#define ALPHA    0
#define NUMBERS  1
#define CODING   2
#define CONTROLS 3

/*
    key positions
    ╭────────────────────╮ ╭────────────────────╮
    │  0   1   2   3   4 │ │  5   6   7   8   9 │
    │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
    │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
    ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
            ╰────────────╯ ╰────────────╯
      Thumbs:  L3  L2  L1     R1  R2  R3
*/
// thumb key positions
#define L3 30
#define L2 31
#define L1 32
#define R1 33
#define R2 34
#define R3 35

// special characters
#define K_YEN     LA(Y)
#define K_EURO    LA(LS(N2))
#define K_POUND   LA(N3)

// modifier aliases
#define LHYPER LC(LA(LG(LSHIFT)))
#define LMEH LC(LA(LSHIFT)))
#define HYPER(K) LC(LA(LG(LS(K))))
#define MEH(K) LC(LA(LS(K)))

// common/mac/app/shortcuts
#define K_UNDO                           LG(Z)
#define K_CUT                            LG(X)
#define K_COPY                           LG(C)
#define K_PASTE                          LG(V)
#define K_CLOSE                          LG(W)
#define K_QUIT                           LG(Q)
#define K_LOCK_SCREEN                    LG(LC(Q))
#define K_ONE_PASSWORD_AUTOFILL          HYPER(X)
#define K_ONE_PASSWORD_SHOW              MEH(X)
#define K_ONE_PASSWORD_BROWSER           LA(LS(X))
#define K_OKTA                           LA(LS(O))
#define K_KEYCAST_TOGGLE                 HYPER(SEMI)
#define K_PRESENTIFY_ANNOTATE            MEH(A)

// combo helper
#define COMBO(NAME, KEYPOS, BINDINGS) \
  combo_##NAME { \
    timeout-ms = <30>; \
    slow-release; \
    key-positions = <KEYPOS>; \
    bindings = <BINDINGS>; \
  };

// macro helper
#define MACRO(NAME, BINDINGS) \
  macro_##NAME: macro_##NAME { \
    compatible = "zmk,behavior-macro"; \
    label = "##NAME"; \
    #binding-cells = <0>; \
    wait-ms = <40>; \
    tap-ms = <40>; \
    bindings = <BINDINGS>; \
  };

&sl {
    release-after-ms = <2000>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE MINUS DOT>;
};

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };

  combos {
    compatible = "zmk,combos";

    /// horizontal, adjacent

    COMBO(  qw,         0 1,    &kp K_CLOSE                          )
    // COMBO(  we,         1 2,    &kp                                  )
    // COMBO(  er,         2 3,    &kp                                  )
    COMBO(  rt,         3 4,    &kp UNDERSCORE                       )

    COMBO(  yu,         5 6,    &kp MINUS                            )
    // COMBO(  ui,         6 7,    &kp                                  )
    // COMBO(  io,         7 8,    &kp                                  )
    // COMBO(  op,         8 9,    &kp                                  )

    // COMBO(  as,         10 11,  &kp                                  )
    COMBO(  sd,         11 12,  &kp BACKSPACE                        )
    COMBO(  df,         12 13,  &kp ESCAPE                           )
    COMBO(  fg,         13 14,  &kp DELETE                           )

    COMBO(  hj,         15 16,  &kp BACKSPACE                        )
    COMBO(  jk,         16 17,  &kp ESCAPE                           )
    COMBO(  kl,         17 18,  &kp DELETE                           )
    COMBO(  lscln,      18 19,  &kp APOSTROPHE                       )

    COMBO(  zx,         20 21,  &kp K_UNDO                           )
    COMBO(  xc,         21 22,  &kp K_CUT                            )
    COMBO(  cv,         22 23,  &kp K_COPY                           )
    COMBO(  vb,         23 24,  &kp K_PASTE                          )

    // COMBO(  nm,         25 26,  &kp                                  )
    // COMBO(  mcomma,     26 27,  &kp                                  )
    COMBO(  commdot,    27 28,  &macro_is_unread                     )
    // COMBO(  dotslsh,    28 29,  &kp                                  )

    /// vertical, adjacent

    COMBO(  qa,         0 10,   &kp EXCL                             )
    COMBO(  ws,         1 11,   &kp AT                               )
    COMBO(  ed,         2 12,   &kp HASH                             )
    COMBO(  rf,         3 13,   &kp DOLLAR                           )
    COMBO(  tg,         4 14,   &kp PERCENT                          )

    COMBO(  yh,         5 15,   &kp CARET                            )
    COMBO(  uj,         6 16,   &kp AMPS                             )
    COMBO(  ik,         7 17,   &kp STAR                             )
    COMBO(  ol,         8 18,   &kp GRAVE                            )
    COMBO(  pscln,      9 19,   &kp EQUAL                            )

    COMBO(  az,         10 20,   &kp BSLH                            )
    COMBO(  sx,         11 21,   &kp LT                              )
    COMBO(  dc,         12 22,   &kp LBRC                            )
    COMBO(  fv,         13 23,   &kp LBKT                            )
    COMBO(  gb,         14 24,   &kp LPAR                            )

    COMBO(  hn,         15 25,   &kp RPAR                            )
    COMBO(  jm,         16 26,   &kp RBKT                            )
    COMBO(  kcomm,      17 27,   &kp RBRC                            )
    COMBO(  ldot,       18 28,   &kp GT                              )
    COMBO(  sclnslsh,   19 29,   &kp EXCL                            )

    /// diagonal, adjacent

    COMBO(  aw,         10 1,    &kp LS(A)                           )
    COMBO(  rg,         3 14,    &kp EQUAL                           )
    COMBO(  hu,         15 6,    &kp PLUS                            )
    COMBO(  ji,         16 7,    &kp LS(I)                           )
    COMBO(  dv,         12 23,   &kp RETURN                          )
    COMBO(  mk,         17 26,   &kp RETURN                          )
    COMBO(  oscln,      8 19,    &kp DOUBLE_QUOTES                   )

    /// special
    COMBO(  jl,         16 18,   &to ALPHA                           )
    COMBO(  sf,         11 13,   &to ALPHA                           )
    COMBO(  sfjl,       11 13 16 18,   &bt BT_CLR                    )
    COMBO(  jkl,        16 17 18,&kp K_MUTE                          )
    COMBO(  xv,         21 23,   &kp SPACE                           )
    COMBO(  mdot,       26 28,   &kp SPACE                           )

    /// one-handed one-shots, mirrored on both sides

    COMBO(  l1_q,       0 L1,   &kp K_LOCK_SCREEN                    )
    COMBO(  l1_w,       1 L1,   &sl CONTROLS                         )
    COMBO(  l1_e,       2 L1,   &sl CODING                           )
    COMBO(  l1_r,       3 L1,   &sl NUMBERS                          )
    COMBO(  l1_t,       4 L1,   &caps_word                           )

    COMBO(  l1_a,       10 L1,  &sk LCTRL                            )
    COMBO(  l1_s,       11 L1,  &sk LALT                             )
    COMBO(  l1_d,       12 L1,  &sk LGUI                             )
    COMBO(  l1_f,       13 L1,  &sk LSHIFT                           )
    COMBO(  l1_g,       14 L1,  &sk LHYPER                           )

    COMBO(  l1_z,       20 L1,  &kp CAPS                             )
    COMBO(  l1_x,       21 L1,  &tog CONTROLS                        )
    COMBO(  l1_c,       22 L1,  &tog CODING                          )
    COMBO(  l1_v,       23 L1,  &tog NUMBERS                         )
    COMBO(  l1_b,       24 L1,  &sk LMEH                             )

    COMBO(  r1_y,       5 R1,   &caps_word                           )
    COMBO(  r1_u,       6 R1,   &sl NUMBERS                          )
    COMBO(  r1_i,       7 R1,   &sl CODING                           )
    COMBO(  r1_o,       8 R1,   &sl CONROLS                          )
    COMBO(  r1_p,       9 R1,   &to ALPHA                            )

    COMBO(  r1_h,       15 R1,  &sk LHYPER                           )
    COMBO(  r1_j,       16 R1,  &sk RSHIFT                           )
    COMBO(  r1_k,       17 R1,  &sk RGUI                             )
    COMBO(  r1_l,       18 R1,  &sk RALT                             )
    COMBO(  r1_scln,    19 R1,  &sk RCTRL                            )

    COMBO(  r1_n,       25 R1,  &sk LMEH                             )
    COMBO(  r1_m,       26 R1,  &tog NUMBERS                         )
    COMBO(  r1_comm,    27 R1,  &tog CODING                          )
    COMBO(  r1_dot,     28 R1,  &tog CONTROLS                        )
    COMBO(  r1_slsh,    29 R1,  &kp CAPS                             )

    /// two-handed symmetric combos

    // COMBO(  qp,         0 9,    &kp                                  )
    // COMBO(  wo,         1 8,    &kp                                  )
    // COMBO(  ei,         2 7,    &kp                                  )
    // COMBO(  ro,         3 6,    &kp                                  )
    // COMBO(  ty,         4 5,    &kp                                  )

    COMBO(  ascln,      10 19,  &sk LCTRL                            )
    COMBO(  sl,         11 18,  &sk LALT                             )
    COMBO(  dk,         12 17,  &sk LGUI                             )
    COMBO(  fj,         13 16,  &sk LSHIFT                           )
    COMBO(  gh,         14 15,  &sk LHYPER                           )

    COMBO(  zslsh,      20 29,  &kp K_UNDO                           )
    COMBO(  xdot,       21 28,  &kp K_CUT                            )
    COMBO(  ccomm,      22 27,  &kp K_COPY                           )
    COMBO(  vm,         23 26,  &kp K_PASTE                          )
    COMBO(  bn,         24 25,  &sk LMEH                             )

    COMBO(  LT1RT1,     L1 R1,  &kp CAPS                             )
    COMBO(  LT2RT2,     L2 R2,  &caps_word                           )
    COMBO(  LT3RT3,     L3 R3,  &tog CONTROLS                        )

    /// more modifier combos

    COMBO(  l2_as,      L2 10 11,     &sk LC(LALT)                   )
    COMBO(  l2_ad,      L2 10 12,     &sk LC(LGUI)                   )
    COMBO(  l2_af,      L2 10 13,     &sk LC(LSHIFT)                 )
    COMBO(  l2_sd,      L2 11 12,     &sk LA(LGUI)                   )
    COMBO(  l2_sf,      L2 11 13,     &sk LA(LSHIFT)                 )
    COMBO(  l2_df,      L2 12 13,     &sk LG(LSHIFT)                 )
    COMBO(  l2_asd,     L2 10 11 12,  &sk LC(LA(LGUI))               )
    COMBO(  l2_asf,     L2 10 11 13,  &sk LC(LA(LSHIFT))             )
    COMBO(  l2_adf,     L2 10 12 13,  &sk LC(LG(LSHIFT))             )
    COMBO(  l2_sdf,     L2 11 12 13,  &sk LA(LG(LSHIFT))             )

    COMBO(  r2_cl,      R2 19 18,     &sk LC(LALT)                   )
    COMBO(  r2_ck,      R2 19 17,     &sk LC(LGUI)                   )
    COMBO(  r2_cj,      R2 19 16,     &sk LC(LSHIFT)                 )
    COMBO(  r2_lk,      R2 18 17,     &sk LA(LGUI)                   )
    COMBO(  r2_lj,      R2 18 16,     &sk LA(LSHIFT)                 )
    COMBO(  r2_kj,      R2 17 16,     &sk LG(LSHIFT)                 )
    COMBO(  r2_clk,     R2 19 18 17,  &sk LC(LA(LGUI))               )
    COMBO(  r2_clj,     R2 19 18 16,  &sk LC(LA(LSHIFT))             )
    COMBO(  r2_ckj,     R2 19 17 16,  &sk LC(LG(LSHIFT))             )
    COMBO(  r2_lkj,     R2 18 17 16,  &sk LA(LG(LSHIFT))             )

    /// shortcuts

    COMBO(  semi_q,     19 0,         &kp K_LOCK_SCREEN              )
    COMBO(  semi_f,     19 13,        &kp K_PRESENTIFY_ANNOTATE      )
    COMBO(  semi_g,     19 14,        &kp K_KEYCAST_TOGGLE           )
    COMBO(  semi_h,     19 15,        &kp K_ONE_PASSWORD_AUTOFILL    )
    COMBO(  semi_j,     19 16,        &kp K_ONE_PASSWORD_SHOW        )
    COMBO(  semi_k,     19 17,        &kp K_OKTA                     )
  };

  macros {
    MACRO(  is_unread,          &macro_tap &kp I &kp S &kp COLON &kp U &kp N &kp R &kp E &kp A &kp D)
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      label = "alpha";
      /*
        Q              W              E              R              T                   Y              U              I              O              P
        A              S              D              F              G                   H              J              K              L              ;
        Z              X              C              V              B                   N              M              ,              .              /
                                      NUMBERS        Shift (One)    Tab                 Enter          Space          CODING
      */
      bindings = <
        &kp Q          &kp W          &kp E          &kp R          &kp T               &kp Y          &kp U          &kp I          &kp O          &kp P
        &kp A          &kp S          &kp D          &kp F          &kp G               &kp H          &kp J          &kp K          &kp L          &kp SEMI
        &kp Z          &kp X          &kp C          &kp V          &kp B               &kp N          &kp M          &kp COMMA      &kp DOT        &kp FSLH
                                      &sl NUMBERS    &sk LSHFT      &kp TAB             &kp RETURN     &kp SPACE      &sl CODING
      >;
    };

    numbers {
      label = "numbers";
      /*
        F1             F2             F3             F4             F5                  F6             F7             F8             F9             F10
        1              2              3              4              5                   6              7              8              9              10
        ¥              €              -              =              *                   £              $              ,              .              /
                                      _____          _____          _____               _____          _____          _____
      */
      bindings = <
        &kp F1         &kp F2         &kp F3         &kp F4         &kp F5              &kp F6         &kp F7         &kp F8         &kp F9         &kp F10
        &kp N1         &kp N2         &kp N3         &kp N4         &kp N5              &kp N6         &kp N7         &kp N8         &kp N9         &kp N0
        &kp K_YEN      &kp K_EURO     &kp MINUS      &kp EQUAL      &kp STAR            &kp K_POUND    &kp DOLLAR     &kp COMMA      &kp DOT        &kp FSLH
                                      &trans         &trans         &trans              &trans         &trans         &trans
      >;
    };

    coding {
      label = "coding";
      /*
        ^              @              (              )              $                   Home           PgDn           PgUp           End            |
        '              `              [              ]              *                   Left           Down           Up             Right          \
        !              #              -              =              ~                   %              &              ,              .              /
                                      _____          _____          _____               _____          _____          _____
      */
      bindings = <
        &kp CARET      &kp AT         &kp LPAR       &kp RPAR       &kp DOLLAR          &kp HOME       &kp PG_DN      &kp PG_UP      &kp END        &kp PIPE
        &kp APOS       &kp GRAVE      &kp LBKT       &kp RBKT       &kp STAR            &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT      &kp BSLH
        &kp EXCL       &kp HASH       &kp MINUS      &kp EQUAL      &kp TILDE           &kp PERCENT    &kp AMPS       &kp COMMA      &kp DOT        &kp FSLH
                                      &trans         &trans         &trans              &trans         &trans         &trans
      >;
    };

    controls {
      label = "controls";
      /*
        CapsLock       Prev           Play/Pause     Next           Vol Up              F7             F8             F9             F10            F13
        BT 0           BT 1           BT 2           BT 3           Vol Dn              F4             F5             F6             F11            F14
        _____          _____          _____          _____          _____               F1             F2             F3             F12            F15
                                      _____          _____          _____               _____          _____          _____
      */
      bindings = <
        &kp CAPS       &kp C_PREV     &kp C_PP       &kp C_NEXT     &kp C_VOL_UP        &kp F7         &kp F8         &kp F9         &kp F10        &kp F13
        &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &kp C_VOL_DN        &kp F4         &kp F5         &kp F6         &kp F11        &kp F14
        &none          &none          &none          &none          &kp K_MUTE          &kp F1         &kp F2         &kp F3         &kp F12        &kp F15
                                      &trans         &trans         &trans              &trans         &trans         &trans
      >;
    };
  };
};
