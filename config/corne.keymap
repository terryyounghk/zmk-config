/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// layers
#define ALPHA    0
#define NUMBERS  1
#define CODING   2
#define CONTROLS 3

// special characters
#define CURR_YEN     LA(Y)
#define CURR_EURO    LA(LS(N2))
#define CURR_POUND   LA(N3)

// thumb key positions
#define L3 30
#define L2 31
#define L1 32
#define R1 33
#define R2 34
#define R3 35

// combo helper
#define COMBO(NAME, KEYPOS, BINDINGS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    slow-release; \
    key-positions = <KEYPOS>; \
    bindings = <BINDINGS>; \
  };

// macro helper
#define MACRO(NAME, BINDINGS) \
  macro_##NAME: macro_##NAME { \
    compatible = "zmk,behavior-macro"; \
    label = "##NAME"; \
    #binding-cells = <0>; \
    wait-ms = <20>; \
    tap-ms = <20>; \
    bindings = <BINDINGS>; \
  };

&sl {
    release-after-ms = <2000>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE MINUS DOT>;
};

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";
      tri_layer {
        if-layers = <1 2>;
        then-layer = <3>;
      };
  };

  combos {
    compatible = "zmk,combos";

    /// horizontal, adjacent

    COMBO(  qw,         0 1,    &kp LG(W)                            )
    // COMBO(  we,         1 2,    &kp                                  )
    // COMBO(  er,         2 3,    &kp                                  )
    COMBO(  rt,         3 4,    &kp UNDERSCORE                       )

    COMBO(  yu,         5 6,    &kp MINUS                            )
    // COMBO(  ui,         6 7,    &kp                                  )
    // COMBO(  io,         7 8,    &kp                                  )
    // COMBO(  op,         8 9,    &kp                                  )

    // COMBO(  as,         10 11,  &kp                                  )
    COMBO(  sd,         11 12,  &kp BACKSPACE                        )
    COMBO(  df,         12 13,  &kp SPACE                            )
    COMBO(  fg,         13 14,  &kp DELETE                           )

    COMBO(  hj,         15 16,  &kp BACKSPACE                        )
    COMBO(  jk,         16 17,  &kp ESCAPE                           )
    COMBO(  kl,         17 18,  &kp DELETE                           )
    COMBO(  lscln,      18 19,  &kp APOSTROPHE                       )

    COMBO(  zx,         20 21,  &kp LG(Z)                            )
    COMBO(  xc,         21 22,  &kp LG(X)                            )
    COMBO(  cv,         22 23,  &kp LG(C)                            )
    COMBO(  vb,         23 24,  &kp LG(V)                            )

    // COMBO(  nm,         25 26,  &kp                                  )
    // COMBO(  mcomma,     26 27,  &kp                                  )
    // COMBO(  commdot,    27 28,  &kp                                  )
    // COMBO(  dotslsh,    28 29,  &kp                                  )

    /// vertical, adjacent

    COMBO(  qa,         0 10,   &kp EXCL                             )
    COMBO(  ws,         1 11,   &kp AT                               )
    COMBO(  ed,         2 12,   &kp HASH                             )
    COMBO(  rf,         3 13,   &kp DOLLAR                           )
    COMBO(  tg,         4 14,   &kp PERCENT                          )

    COMBO(  yh,         5 15,   &kp CARET                            )
    COMBO(  uj,         6 16,   &kp AMPS                             )
    COMBO(  ik,         7 17,   &kp STAR                             )
    COMBO(  ol,         8 18,   &kp GRAVE                            )
    COMBO(  pscln,      9 19,   &kp EQUAL                            )

    COMBO(  az,         10 20,   &kp BSLH                            )
    COMBO(  sx,         11 21,   &kp LT                              )
    COMBO(  dc,         12 22,   &kp LBRC                            )
    COMBO(  fv,         13 23,   &kp LBKT                            )
    COMBO(  gb,         14 24,   &kp LPAR                            )

    COMBO(  hn,         15 25,   &kp RPAR                            )
    COMBO(  jm,         16 26,   &kp RBKT                            )
    COMBO(  kcomm,      17 27,   &kp RBRC                            )
    COMBO(  ldot,       18 28,   &kp GT                              )
    COMBO(  sclnslsh,   19 29,   &kp EXCL                            )

    /// diagonal, adjacent

    COMBO(  aw,         10 1,    &kp LS(A)                           )
    COMBO(  rg,         3 14,    &kp EQUAL                           )
    COMBO(  hu,         15 6,    &kp LS(EQUAL)                       )
    COMBO(  ji,         16 7,    &kp LS(I)                           )
    COMBO(  dv,         12 23,   &kp RETURN                          )
    COMBO(  mk,         15 26,   &kp RETURN                          )
    COMBO(  oscln,      8 19,    &kp DOUBLE_QUOTES                   )

    /// special

    COMBO(  jl,         16 18,   &to ALPHA                           )
    COMBO(  sf,         11 13,   &to ALPHA                           )


    /// one-handed one-shots, mirrored on both sides

    COMBO(  l1_q,       0 32,   &kp LG(LC(Q))                        )
    COMBO(  l1_w,       1 32,   &sl NUMBERS                          )
    COMBO(  l1_e,       2 32,   &sl CODING                           )
    COMBO(  l1_r,       3 32,   &sl CONTROLS                         )
    COMBO(  l1_t,       4 32,   &caps_word                           )

    COMBO(  l1_a,       10 32,  &sk LCTRL                            )
    COMBO(  l1_s,       11 32,  &sk LALT                             )
    COMBO(  l1_d,       12 32,  &sk LGUI                             )
    COMBO(  l1_f,       13 32,  &sk LSHIFT                           )
    COMBO(  l1_g,       14 32,  &sk LC(LA(LG(LSHIFT)))               ) // hyper

    COMBO(  l1_z,       20 32,  &kp CAPS                             )
    COMBO(  l1_x,       21 32,  &tog NUMBERS                         )
    COMBO(  l1_c,       22 32,  &tog CODING                          )
    COMBO(  l1_v,       23 32,  &tog CONTROLS                        )
    COMBO(  l1_b,       24 32,  &sk LC(LA(LSHIFT))                   ) // meh

    COMBO(  r1_y,       5 32,   &caps_word                           )
    COMBO(  r1_u,       6 32,   &sl CONTROLS                         )
    COMBO(  r1_i,       7 32,   &sl CODING                           )
    COMBO(  r1_o,       8 32,   &sl NUMBERS                          )
    COMBO(  r1_p,       9 32,   &to ALPHA                            ) // back to default layer

    COMBO(  r1_h,       15 32,  &sk RC(RA(RG(RSHIFT)))               ) // hyper
    COMBO(  r1_j,       16 32,  &sk RSHIFT                           )
    COMBO(  r1_k,       17 32,  &sk RGUI                             )
    COMBO(  r1_l,       18 32,  &sk RALT                             )
    COMBO(  r1_scln,    19 32,  &sk RCTRL                            )

    COMBO(  r1_n,       25 32,  &sk LC(LA(LSHIFT))                   )
    COMBO(  r1_m,       26 32,  &tog CONTROLS                        )
    COMBO(  r1_comm,    27 32,  &tog CODING                          )
    COMBO(  r1_dot,     28 32,  &tog NUMBERS                         )
    // COMBO(  r1_slsh,    29 32,  &tog NUMBERS                         )

    /// two-handed symmetric combos

    // COMBO(  qp,         0 9,    &kp                                  )
    // COMBO(  wo,         1 8,    &kp                                  )
    // COMBO(  ei,         2 7,    &kp                                  )
    // COMBO(  ro,         3 6,    &kp                                  )
    // COMBO(  ty,         4 5,    &kp                                  )

    COMBO(  ascln,      10 19,  &sk LCTRL                            )
    COMBO(  sl,         11 18,  &sk LALT                             )
    COMBO(  dk,         12 17,  &sk LGUI                             )
    COMBO(  fj,         13 16,  &sk LSHIFT                           )
    COMBO(  gh,         14 15,  &sk LC(LA(LG(LSHIFT)))               ) // hyper

    COMBO(  zslsh,      20 29,  &kp LG(Z)                            )
    COMBO(  xdot,       21 28,  &kp LG(X)                            )
    COMBO(  ccomm,      22 27,  &kp LG(C)                            )
    COMBO(  vm,         23 26,  &kp LG(V)                            )
    COMBO(  bn,         24 25,  &sk LC(LA(LSHIFT))                   ) // meh

    COMBO(  LT1RT1,     32 33,  &kp CAPS                             )
    COMBO(  LT2RT2,     31 34,  &caps_word                           )
    COMBO(  LT3RT3,     30 35,  &tog CONTROLS                        )

    /// other combos
    COMBO(  commdot,    27 28,  &macro_is_unread                     ) // types "is:unread" I use frequently in Gmail search
    COMBO(  ddot,       12 28,  &macro_is_unread                     ) // types "is:unread" I use frequently in Gmail search
  };

  macros {
    MACRO(  is_unread,          &macro_tap &kp I &kp S &kp COLON &kp U &kp N &kp R &kp E &kp A &kp D)
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      label = "alpha";

      /*
        Q              W              E              R              T                   Y              U              I              O              P
        A              S              D              F              G                   H              J              K              L              ;
        Z              X              C              V              B                   N              M              ,              .              /
                                      NUMBERS        Shift (One)    Tab                 Enter          Space          CODING
      */
      bindings = <
        &kp Q          &kp W          &kp E          &kp R          &kp T               &kp Y          &kp U          &kp I          &kp O          &kp P
        &kp A          &kp S          &kp D          &kp F          &kp G               &kp H          &kp J          &kp K          &kp L          &kp SEMI
        &kp Z          &kp X          &kp C          &kp V          &kp B               &kp N          &kp M          &kp COMMA      &kp DOT        &kp FSLH
                                      &tog NUMBERS   &sk LSHFT      &kp TAB             &kp RETURN     &kp SPACE      &tog CODING
      >;
    };

    numbers {
      label = "numbers";

      /*
        F1             F2             F3             F4             F5                  F6             F7             F8             F9             F10
        1              2              3              4              5                   6              7              8              9              10
        ¥              €              -              =              *                   £              $              ,              .              /
                                      _____          _____          _____               _____          _____          _____
      */
      bindings = <
        &kp F1         &kp F2         &kp F3         &kp F4         &kp F5              &kp F6         &kp F7         &kp F8         &kp F9         &kp F10
        &kp N1         &kp N2         &kp N3         &kp N4         &kp N5              &kp N6         &kp N7         &kp N8         &kp N9         &kp N0
        &kp CURR_YEN   &kp CURR_EURO  &kp MINUS      &kp EQUAL      &kp STAR            &kp CURR_POUND &kp DOLLAR     &kp COMMA      &kp DOT        &kp FSLH
                                      &trans         &trans         &trans              &trans         &trans         &trans
      >;
    };

    coding {
      label = "coding";

      /*
        ^              @              (              )              $                   Home           PgDn           PgUp           End            |
        '              `              [              ]              *                   Left           Down           Up             Right          \
        !              #              -              =              ~                   %              &              ,              .              /
                                      _____          _____          _____               _____          _____          _____
      */
      bindings = <
        &kp CARET      &kp AT         &kp LPAR       &kp RPAR       &kp DOLLAR          &kp HOME       &kp PG_DN      &kp PG_UP      &kp END        &kp PIPE
        &kp APOS       &kp GRAVE      &kp LBKT       &kp RBKT       &kp STAR            &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT      &kp BSLH
        &kp EXCL       &kp HASH       &kp MINUS      &kp EQUAL      &kp TILDE           &kp PERCENT    &kp AMPS       &kp COMMA      &kp DOT        &kp FSLH
                                      &trans         &trans         &trans              &trans         &trans         &trans
      >;
    };

    controls {
      label = "controls";

      /*
        Ctx Menu       Prev           Play/Pause     Next           Vol Up              F7             F8             F9             F10            F13
        BT Clr         BT 1           BT 2           BT 3           Vol Dn              F4             F5             F6             F11            F14
        _____          _____          _____          _____          _____               F1             F2             F3             F12            F15
                                      _____          _____          _____               _____          _____          _____
      */
      bindings = <
        &kp K_CMENU    &kp C_PREV     &kp C_PP       &kp C_NEXT     &kp C_VOL_UP        &kp F7         &kp F8         &kp F9         &kp F10        &kp F13
        &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &kp C_VOL_DN        &kp F4         &kp F5         &kp F6         &kp F11        &kp F14
        &macro_is_unread &none        &none          &none          &none               &kp F1         &kp F2         &kp F3         &kp F12        &kp F15
                                      &trans         &trans         &trans              &trans         &trans         &trans
      >;
    };
  };
};
